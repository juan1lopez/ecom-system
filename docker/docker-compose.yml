services:
    ecomerce:
        image: app-commerce:v1.2.9.3
        container_name: ecomerce
        ports:
            - 5000:5000
        networks:
            - mired
        environment:
            - FLASK_CONTEXT=${FLASK_CONTEXT}
            # el valor de REDIS_HOST = al container_name que tiene en su propio docker-compose.yml
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_DB=${REDIS_DB}
            - MSCATALOGO_URL=${MSCATALOGO_URL}
            - MSPAGOS_URL=${MSPAGOS_URL}
            - MSCOMPRAS_URL=${MSCOMPRAS_URL}
            - MSINVENTARIOS_URL=${MSINVENTARIOS_URL}
            - TEST_DATABASE_URI=${TEST_DATABASE_URI}
            - DEV_DATABASE_URI=${DEV_DATABASE_URI}
            - PROD_DATABASE_URI=${PROD_DATABASE_URI}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.ecomerce.rule=Host(`app.ecommerce.local`)"
            - "traefik.http.services.ecomerce.loadbalancer.server.port=5000"
            - "traefik.http.routers.ecomerce.tls=true"
            - "traefik.docker.network=mired"
        
        extra_hosts:
            - catalogo.ecommerce.local:172.20.0.1
            - pagos.ecommerce.local:172.20.0.1
            - compras.ecommerce.local:172.20.0.1
            - inventarios.ecommerce.local:172.20.0.1

    mscatalogo:
        image: mscatalogo:v1.0.3
        container_name: mscatalogo
        depends_on:
            - ecomerce
        ports:
            - 5001:5000
        networks:
            - mired
        environment:
            - FLASK_CONTEXT=${FLASK_CONTEXT}
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_DB=${REDIS_DB}
            # la URI para el servidor se obtiene de container_name del docker-compose de postgresql: [postgresql://usuario:password@postgresql-servidor:5432/ecommerce]
            - TEST_DATABASE_URI=${TEST_DATABASE_URI}
            - DEV_DATABASE_URI=${DEV_DATABASE_URI}
            - PROD_DATABASE_URI=${PROD_DATABASE_URI}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.mscatalogo.rule=Host(`catalogo.ecommerce.local`)"
            - "traefik.http.services.mscatalogo.loadbalancer.server.port=5000"
            - "traefik.http.routers.mscatalogo.tls=true"
            - "traefik.docker.network=mired"
            # Circuit Breakers
            - "traefik.http.middlewares.mscatalogo.circuitbreaker.expression=LatencyAtQuantileMS(75.0) > 100"
            - "traefik.http.middlewares.mscatalogo.circuitbreaker.expression=ResponseCodeRatio(500, 600, 0, 600) > 0.25"
            - "traefik.http.middlewares.mscatalogo.circuitbreaker.expression=NetworkErrorRatio() > 0.25"
        
    mspagos:
        image: mspagos:v1.0.4
        container_name: mspagos
        depends_on:
            - ecomerce
        ports:
            - 5002:5000
        networks:
            - mired
        environment:
            - FLASK_CONTEXT=${FLASK_CONTEXT}
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_DB=${REDIS_DB}
            - TEST_DATABASE_URI=${TEST_DATABASE_URI}
            - DEV_DATABASE_URI=${DEV_DATABASE_URI}
            - PROD_DATABASE_URI=${PROD_DATABASE_URI}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.mspagos.rule=Host(`pagos.ecommerce.local`)"
            - "traefik.http.services.mspagos.loadbalancer.server.port=5000"
            - "traefik.http.routers.mspagos.tls=true"
            - "traefik.docker.network=mired"
            # Circuit Breakers
            - "traefik.http.middlewares.mspagos.circuitbreaker.expression=LatencyAtQuantileMS(75.0) > 150"
            - "traefik.http.middlewares.mspagos.circuitbreaker.expression=ResponseCodeRatio(500, 600, 0, 600) > 0.25"
            - "traefik.http.middlewares.mspagos.circuitbreaker.expression=NetworkErrorRatio() > 0.25"
    mscompras:
        image: mscompras:v1.2.2
        container_name: mscompras
        depends_on:
            - ecomerce
        ports:
            - 5003:5000
        networks:
            - mired
        environment:
            - FLASK_CONTEXT=${FLASK_CONTEXT}
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_DB=${REDIS_DB}
            - TEST_DATABASE_URI=${TEST_DATABASE_URI}
            - DEV_DATABASE_URI=${DEV_DATABASE_URI}
            - PROD_DATABASE_URI=${PROD_DATABASE_URI}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.mscompras.rule=Host(`compras.ecommerce.local`)"
            - "traefik.http.services.mscompras.loadbalancer.server.port=5000"
            - "traefik.http.routers.mscompras.tls=true"
            - "traefik.docker.network=mired"
            # Circuit Breakers
            - "traefik.http.middlewares.mscompras.circuitbreaker.expression=LatencyAtQuantileMS(75.0) > 150"
            - "traefik.http.middlewares.mscompras.circuitbreaker.expression=ResponseCodeRatio(500, 600, 0, 600) > 0.25"
            - "traefik.http.middlewares.mscompras.circuitbreaker.expression=NetworkErrorRatio() > 0.25"
    msinventarios:
        image: msinventario:v1.0.7
        container_name: msinventarios
        depends_on:
            - ecomerce
        ports:
            - 5004:5000
        networks:
            - mired
        environment:
            - FLASK_CONTEXT=${FLASK_CONTEXT}
            - REDIS_HOST=${REDIS_HOST}
            - REDIS_PORT=${REDIS_PORT}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_DB=${REDIS_DB}
            - TEST_DATABASE_URI=${TEST_DATABASE_URI}
            - DEV_DATABASE_URI=${DEV_DATABASE_URI}
            - PROD_DATABASE_URI=${PROD_DATABASE_URI}
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.msinventarios.rule=Host(`inventarios.ecommerce.local`)"
            - "traefik.http.services.msinventarios.loadbalancer.server.port=5000"
            - "traefik.http.routers.msinventarios.tls=true"
            - "traefik.docker.network=mired"
            # Circuit Breakers
            - "traefik.http.middlewares.msinventarios.circuitbreaker.expression=LatencyAtQuantileMS(75.0) > 150"
            - "traefik.http.middlewares.msinventarios.circuitbreaker.expression=ResponseCodeRatio(500, 600, 0, 600) > 0.25"
            - "traefik.http.middlewares.msinventarios.circuitbreaker.expression=NetworkErrorRatio() > 0.25"

# Todos los microservicios y servicios (redis, postgresql) deben estar en la misma red
networks:
    mired:
        external: true
